{
	"metadata": {
		"version": 1
	},
	"application": {
		"name": "PetClinicApplication",
		"language": "JAVA_MAVEN",
		"artifact_store": {
			"type": "s3",
			"repositories": [
				{
					"category": "rc-packaging",
					"bucket": "guide-rails-calculi-rc"
				},
				{
					"category": "final-packaging",
					"bucket": "guide-rails-calculi-final"
				},
				{
					"category": "logs",
					"bucket": "guide-rails-calculi-logs"
				}
			]
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"job_steps": [
					{
						"name": "Install Chrome",
						"definition": "Install Chrome",
						"command": "wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n\necho '---------------------- installing Chrome ----------------------'\nsudo dpkg -i google-chrome-stable_current_amd64.deb",
						"properties": null
					},
					{
						"name": "compile",
						"definition": "Run the maven compile command",
						"command": "echo '------------------ initialing maven compile job step ----------------'\nmvn compile\n",
						"properties": null
					},
					{
						"name": "package",
						"definition": "Run the maven package command",
						"command": "echo '------------------ initialing maven package job step ----------------'\nmvn package",
						"properties": null
					},
					{
						"name": "copy-jar",
						"definition": "Copy final JAR to expected location",
						"command": "echo \"--------------------- copy-jar step --------------------------\"\nls -l\necho \" --------------------- showing target now --------------------\"\nls target\necho \" ------------------ showing parent --------------------------\"\nls ..\necho \" ------------------- end of parent ----------------------------\"\n\ncp -f target/*.[jwe]ar   .",
						"properties": null
					}
				],
				"exit_actions": {
					"default": {
						"code_analysis": {
							"publish": true,
							"properties": null
						}
					},
					"on_success": {
						"code_analysis": null
					},
					"on_failure": {
						"code_analysis": null
					},
					"on_abort": {
						"code_analysis": null
					}
				},
				"notification_configurations": [
					{
						"notification_type": "slack",
						"tool_alias": "Slack",
						"protected": false,
						"properties": [],
						"notification_actions": {
							"default": {
								"send_notification": true,
								"to": [
									"#trnobserve"
								],
								"message": "Build Default Notification for ((application.name))"
							},
							"on_success": {
								"send_notification": true,
								"to": [
									"trnobserve"
								],
								"message": "Build SUCCESSFUL for ((application.name))"
							},
							"on_failure": {
								"send_notification": true,
								"to": [
									"#trnobserve"
								],
								"message": "Build FAILED ------- ((application.name))"
							},
							"on_abort": {
								"send_notification": true,
								"to": [
									"#trnobserve"
								],
								"message": "Build ABORTED -x-x-x-x-x-x-x- ((application.name))"
							}
						}
					}
				],
				"properties": [
					{
						"name": "gradle.user.home",
						"description": "GRADLE_USER_HOME is set to ${SEGMENT_BASE_DIR}/cache/.gradle by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created",
						"value": "${SEGMENT_BASE_DIR}/cache/.gradle"
					},
					{
						"name": "ivy.defaultCacheDir",
						"description": "ivy cache directory is set to ${SEGMENT_BASE_DIR}/cache/.ivy by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created",
						"value": "${SEGMENT_BASE_DIR}/cache/.ivy"
					},
					{
						"name": "maven.repo.local",
						"description": "maven local repository is set to ${SEGMENT_BASE_DIR}/cache/.m2 by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created",
						"value": "${SEGMENT_BASE_DIR}/cache/.m2"
					},
					{
						"name": "test_dirs",
						"value": "src/test/java",
						"type": "string"
					}
				],
				"deployment_strategy": {},
				"application_init": {
					"command": "",
					"arguments": null
				},
				"packages": [
					{
						"name": "((application.name))",
						"dependencies": [],
						"downloads": [],
						"files": [
							"((app.package.name))*"
						],
						"package_install_command": "",
						"installed_path": ""
					},
					{
						"name": "maven",
						"dependencies": [
							"jdk"
						],
						"downloads": [
							{
								"link": "http://mirror.cc.columbia.edu/pub/software/apache/maven/maven-3/((maven.version))/binaries/apache-maven-((maven.version))-bin.tar.gz",
								"name": "apache-maven-((maven.version))-bin.tar.gz"
							}
						],
						"files": [],
						"package_install_command": "tar xvf maven/apache-maven-((maven.version))-bin.tar.gz -C ${BOSH_INSTALL_TARGET}",
						"installed_path": ""
					},
					{
						"name": "jdk",
						"dependencies": [],
						"downloads": [
							{
								"link": "https://s3.amazonaws.com/calculi-middleware/jdk-((jdk.version))-linux-x64.tar.gz",
								"name": "jdk-((jdk.version))-linux-x64.tar.gz"
							}
						],
						"files": [],
						"package_install_command": "tar xzf jdk/jdk-((jdk.version))-linux-x64.tar.gz\n cp -Rf * ${BOSH_INSTALL_TARGET}/\n",
						"installed_path": ""
					}
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"post_deployment_actions": {
					"instances": null,
					"loadbalanced": false,
					"loadbalancer": {
						"TargetGroupName": "",
						"TargetGroupPort": 0,
						"TargetGroupProtocol": "",
						"TargetType": "",
						"VPCID": "",
						"HealthCheckEnabled": false,
						"HealthCheckPort": "",
						"UnhealthyThresholdCount": 0
					}
				},
				"cache_info": {
					"enabled": true,
					"paths": [
						"((gradle.user.home))",
						"((ivy.defaultCacheDir))",
						"((maven.repo.local))"
					]
				}
			},
			{
				"name": "Integration",
				"segment_type": "integration",
				"persistent": true,
				"run_after": [
					"Build"
				],
				"job_steps": [
					{
						"name": "Start Exec",
						"definition": "Start Exec",
						"command": "echo \"-------------------- Start the Test Execution ------------------------\necho \" --------- Need to invoke the jmeter scripts of the package from here--------\"\necho \" --- Have added some consul properties at the Org level - 2019-10-22---\"",
						"properties": null
					}
				],
				"exit_actions": {
					"default": {
						"fetch_logs": true,
						"code_analysis": {
							"publish": false,
							"properties": null
						},
						"delete_instances": true
					},
					"on_success": {
						"code_analysis": {
							"publish": false,
							"properties": null
						}
					},
					"on_failure": {
						"code_analysis": {
							"publish": false,
							"properties": null
						}
					},
					"on_abort": {
						"code_analysis": {
							"publish": false,
							"properties": null
						}
					}
				},
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {
					"command": "",
					"arguments": null
				},
				"process": {
					"init": {
						"command": ""
					}
				},
				"package_dependencies": [
					"((application.name))",
					"maven"
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"instance_groups": [
					{
						"name": "Test-Exec-Env",
						"number_of_instances": 1,
						"persistent_disk_type": "",
						"vm_type": "default",
						"os_type": "default",
						"networks": [
							"((deploy.target.network.integration))"
						],
						"availability_zones": [
							"((deploy.target.zone.integration))"
						],
						"deployment_strategy": {},
						"dependencies": [
							{
								"name": "consul",
								"release": "consul",
								"provides": [
									{
										"name": "consul_servers.as",
										"value": "consul_2"
									}
								],
								"consumes": [
									{
										"name": "consul_servers.from",
										"value": "consul_2"
									}
								],
								"properties": [
									{
										"name": "consul.servicename",
										"value": "((consul.servicename))"
									},
									{
										"name": "consul.environment",
										"value": "((consul.environment))"
									},
									{
										"name": "consul.datacenter",
										"value": "((consul.datacenter))"
									},
									{
										"name": "consul.server",
										"value": "false"
									},
									{
										"name": "consul.joinservers",
										"value": "((consul.joinservers))"
									},
									{
										"name": "calculi.intermediate.cert",
										"value": "grsecret:tls.cert"
									},
									{
										"name": "calculi.intermediate.key",
										"value": "grsecret:tls.key"
									}
								]
							},
							{
								"name": "jmeter",
								"release": "jmeter",
								"properties": []
							}
						]
					},
					{
						"name": "((application.name))",
						"number_of_instances": 1,
						"persistent_disk_type": "",
						"vm_type": "default",
						"os_type": "default",
						"networks": [
							"((deploy.target.network.integration))"
						],
						"availability_zones": [
							"((deploy.target.zone.integration))"
						],
						"deployment_strategy": {},
						"dependencies": [
							{
								"name": "consul",
								"release": "consul",
								"provides": [
									{
										"name": "consul_servers.as",
										"value": "consul_1"
									}
								],
								"consumes": [
									{
										"name": "consul_servers.from",
										"value": "consul_1"
									}
								],
								"properties": [
									{
										"name": "consul.servicename",
										"value": "((consul.servicename))"
									},
									{
										"name": "consul.environment",
										"value": "((consul.environment))"
									},
									{
										"name": "consul.datacenter",
										"value": "((consul.datacenter))"
									},
									{
										"name": "consul.server",
										"value": "false"
									},
									{
										"name": "consul.joinservers",
										"value": "((consul.joinservers))"
									},
									{
										"name": "calculi.intermediate.cert",
										"value": "grsecret:tls.cert"
									},
									{
										"name": "calculi.intermediate.key",
										"value": "grsecret:tls.key"
									}
								]
							}
						]
					}
				],
				"post_deployment_actions": {
					"instances": null,
					"loadbalanced": false,
					"loadbalancer": {
						"TargetGroupName": "",
						"TargetGroupPort": 0,
						"TargetGroupProtocol": "",
						"TargetType": "",
						"VPCID": "",
						"HealthCheckEnabled": false,
						"HealthCheckPort": "",
						"UnhealthyThresholdCount": 0
					}
				}
			}
		],
		"exit_actions": {
			"default": {
				"fetch_logs": true,
				"code_analysis": {
					"publish": true,
					"properties": null
				},
				"delete_instances": true
			},
			"on_success": {
				"code_analysis": null
			},
			"on_failure": {
				"code_analysis": null
			},
			"on_abort": {
				"code_analysis": null
			}
		},
		"notification_configurations": [
			{
				"notification_type": "slack",
				"tool_alias": "Slack",
				"protected": false,
				"properties": [],
				"notification_actions": {
					"default": {
						"send_notification": true,
						"to": [
							"#trnobserve"
						],
						"message": "((aplication.name)) - Default notification"
					},
					"on_success": {
						"send_notification": false,
						"to": [
							""
						],
						"message": ""
					},
					"on_failure": {
						"send_notification": true,
						"to": [
							"#trnobserve"
						],
						"message": "((application.name)) - Pipeline failed"
					},
					"on_abort": {
						"send_notification": false,
						"to": [
							""
						],
						"message": ""
					}
				}
			}
		],
		"default_properties": [
			{
				"name": "app.package.name",
				"value": "spring-petclinic",
				"type": "string"
			},
			{
				"name": "quality.coverage.error",
				"value": 0.5,
				"type": "number"
			},
			{
				"name": "quality.coverage.warn",
				"value": 0.85,
				"type": "number"
			},
			{
				"name": "quality.security.error",
				"value": 10,
				"type": "number"
			},
			{
				"name": "quality.security.warn",
				"value": 5,
				"type": "number"
			},
			{
				"name": "quality.lint.error",
				"value": 20,
				"type": "number"
			},
			{
				"name": "quality.lint.warn",
				"value": 5,
				"type": "number"
			},
			{
				"name": "jdk.version",
				"description": "jdk version",
				"value": "8u181",
				"type": "string"
			},
			{
				"name": "maven.version",
				"description": "maven version",
				"value": "3.6.2",
				"type": "string"
			}
		],
		"deployment_files": [
			{
				"source_path": "ci/bin/start-service.sh",
				"target_path": "bin/start-service.sh"
			}
		],
		"application_init": {
			"command": "",
			"arguments": null
		},
		"process": {
			"init": {
				"command": ""
			}
		},
		"releases": [
			{
				"name": "consul",
				"version": "latest"
			},
			{
				"name": "jmeter",
				"version": "latest"
			}
		]
	},
	"organization": {
		"orgname": "OpenOrg"
	}
}